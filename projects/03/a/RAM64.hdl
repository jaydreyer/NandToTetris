// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    //DMux will set one of the 8 registers load value to 1 or 0 based on address
    //Address and RAM are in the address[6] input. [0..2]=RAM8 chip, [3..5]=Address within chip
    DMux8Way(in=load, sel=address[0..2], a=loadA, b=loadB, c=loadC, d=loadD, e=loadE, f=loadF, g=loadG, h=loadH);

    //Blast the value and various load values to each register
    RAM8(in=in, load=loadA, address=address[3..5], out=outA);
    RAM8(in=in, load=loadB, address=address[3..5], out=outB);
    RAM8(in=in, load=loadC, address=address[3..5], out=outC);
    RAM8(in=in, load=loadD, address=address[3..5], out=outD);
    RAM8(in=in, load=loadE, address=address[3..5], out=outE);
    RAM8(in=in, load=loadF, address=address[3..5], out=outF);
    RAM8(in=in, load=loadG, address=address[3..5], out=outG);
    RAM8(in=in, load=loadH, address=address[3..5], out=outH);

    //Set the output of the correct register
    Mux8Way16(a=outA, b=outB, c=outC, d=outD, e=outE, f=outF, g=outG, h=outH, sel=address[0..2], out=out);

}
