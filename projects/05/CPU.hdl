// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

 // instruction[15]: 1=C instruction, 0=A instruction
 // A = instruction[0..14]
 // C = a bunch of stuff:
 // instruction[0..2] = jump
 //   0 = > 0
 //   1 = = 0
 //   2 = < 0
 // instruction[0] = j3
 // instruction[1] = j2
 // instruction[2] = j1
 // instruction[3..5] = destination
 //   3 = write to memory
 //   4 = D register
 //   5 = A register
 // instruction[6..11] = comuptation + instruction[12] = a
 //   6 = no
 //   7 = f
 //   8 = ny
 //   9 = zy
 //  10 = nx
 //  11 = zx

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // DECODE: If A=0, it's an A, else it's a C
    Not(in=instruction[15], out=ainstruction);
    Not(in=ainstruction, out=cinstruction);

    // Load the ARegister. Data either comes from ainstruction or ALU output
    // So, if A=0 or Instruction[5]=1, then load into ARegister
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=muxAOut);
    Or(a=ainstruction, b=instruction[5], out=loadA);
    ARegister(in=muxAOut, load=loadA, out=outA, out[0..14]=addressM);

    // Load the DRegister. Check instruction[4] and that it's a c.
    And(a=cinstruction, b=instruction[4], out=loadD);
    DRegister(in=ALUout, load=loadD, out=outD);

    // What gets sent to ALU? A or M? A=0 M=1
    Mux16(a=outA, b=inM, sel=instruction[12], out=MAout);

    // Time for the ALU. D is first to go, followed by A or M (MAout from above)
    ALU(x=outD, y=MAout, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUout, zr=zr, ng=ng);

    // Do we need to write to M? instruction[3] tells us. So if it's a C-inst and inst[3] then write to M
    And(a=cinstruction, b=instruction[3], out=writeM);

    // Want to load new address if any of the jump bits instruction[0..2] are set
    // and the corresponding output condition is met
    Not(in=ng, out=ge); // output >= 0
    Not(in=zr, out=nz); // output != 0
    And(a=ge, b=nz, out=pos); // output > 0

    And(a=instruction[0], b=pos, out=jmp0);
    And(a=instruction[1], b=zr, out=jmp1);
    And(a=instruction[2], b=ng, out=jmp2);

    Or(a=jmp0, b=jmp1, out=or12);
    Or(a=or12, b=jmp2, out=or123);
    And(a=cinstruction, b=or123, out=loadPC);
    // want to increment if we didn't have a load or a reset instruction
    Or(a=reset, b=loadPC, out=resetORload);
    Not(in=resetORload, out=incPC);
    // PC is always hooked up to A register

    PC(reset=reset, load=loadPC, in=outA, inc=true, out[0..14]=pc);
}
